# Generated by Django 5.1.12 on 2025-09-23 09:24

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.CharField(choices=[('SELLER', 'Seller'), ('CONSUMER', 'Consumer'), ('ADMIN', 'Admin')], default='CONSUMER', help_text='user role to determine access permissions', max_length=10)),
                ('phone_number', models.CharField(blank=True, max_length=20, null=True, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in format: '+999999999'. Up to 15 digits allowed.", regex='^\\+?1?\\d{9,15}$')])),
                ('address', models.TextField(blank=True, help_text='Full address for business/shipping purposes', null=True)),
                ('store_name', models.CharField(blank=True, help_text='store name to identify the store', max_length=200, null=True)),
                ('profile_picture', models.CharField(blank=True, help_text='profile image url from cloudinary', max_length=500, null=True)),
                ('is_email_verified', models.BooleanField(default=False, help_text='Email verification status')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'db_table': 'users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='unique category name', max_length=100, unique=True)),
                ('description', models.TextField(blank=True, help_text='detailed category description', null=True)),
                ('slug', models.SlugField(help_text='URL-friendly version of category name', max_length=100, unique=True)),
                ('is_active', models.BooleanField(default=True, help_text='Whether category is active and visible')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('parent_category', models.ForeignKey(blank=True, help_text='Parent category for hierarchical organization', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='subcategories', to='store.category')),
            ],
            options={
                'verbose_name': 'Category',
                'verbose_name_plural': 'Categories',
                'db_table': 'categories',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Product name/title', max_length=200)),
                ('description', models.TextField(blank=True, help_text='Detailed product description', null=True)),
                ('price', models.DecimalField(decimal_places=2, help_text='Product price', max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))])),
                ('sku', models.CharField(help_text='Stock Keeping Unit - unique product identifier', max_length=100, unique=True)),
                ('stock_quantity', models.PositiveIntegerField(default=0, help_text='current stock quantity')),
                ('is_active', models.BooleanField(default=True, help_text='Whether product is active and visible')),
                ('is_featured', models.BooleanField(default=False, help_text='Whether product is featured on homepage')),
                ('sales_count', models.PositiveIntegerField(default=0, help_text='total number of times this product has been sold')),
                ('brand', models.CharField(blank=True, help_text='Product brand', max_length=100, null=True)),
                ('tags', models.TextField(blank=True, help_text='Comma-separated tags for search and filtering', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('category', models.ForeignKey(help_text='product category', on_delete=django.db.models.deletion.CASCADE, related_name='products', to='store.category')),
                ('seller', models.ForeignKey(help_text='product seller', limit_choices_to={'role': 'SELLER'}, on_delete=django.db.models.deletion.CASCADE, related_name='products', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Product',
                'verbose_name_plural': 'Products',
                'db_table': 'products',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ProductImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.CharField(help_text='image URL', max_length=500)),
                ('alt_text', models.CharField(help_text='Alternative text for image accessibility', max_length=255)),
                ('is_primary', models.BooleanField(default=False, help_text='Whether this is the primary product image')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('product', models.ForeignKey(help_text='associated product', on_delete=django.db.models.deletion.CASCADE, related_name='images', to='store.product')),
            ],
            options={
                'verbose_name': 'Product Image',
                'verbose_name_plural': 'Product Images',
                'db_table': 'product_images',
                'ordering': ['-is_primary', 'created_at'],
            },
        ),
        migrations.CreateModel(
            name='ProductSale',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.PositiveIntegerField(default=1, help_text='quantity sold')),
                ('price_at_sale', models.DecimalField(decimal_places=2, help_text='price per unit at time of sale', max_digits=10)),
                ('sale_date', models.DateTimeField(auto_now_add=True, help_text='date and time of sale')),
                ('buyer', models.ForeignKey(blank=True, help_text='Buyer of the product (if registered user)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='purchases', to=settings.AUTH_USER_MODEL)),
                ('product', models.ForeignKey(help_text='Product that was sold', on_delete=django.db.models.deletion.CASCADE, related_name='sales', to='store.product')),
                ('seller', models.ForeignKey(help_text='Seller of the product', limit_choices_to={'role': 'SELLER'}, on_delete=django.db.models.deletion.CASCADE, related_name='sales_as_seller', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Product Sale',
                'verbose_name_plural': 'Product Sales',
                'db_table': 'product_sales',
                'ordering': ['-sale_date'],
            },
        ),
        migrations.CreateModel(
            name='EmailLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('recipient_email', models.EmailField(help_text='Email address of recipient', max_length=254)),
                ('email_type', models.CharField(choices=[('WELCOME', 'Welcome Email'), ('ANALYTICS_REPORT', 'Analytics Report'), ('LOW_STOCK_ALERT', 'Low Stock Alert'), ('SYSTEM_NOTIFICATION', 'System Notification')], help_text='Type of email sent', max_length=50)),
                ('subject', models.CharField(help_text='Email subject line', max_length=255)),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('SENT', 'Sent Successfully'), ('FAILED', 'Failed to Send'), ('BOUNCED', 'Bounced')], default='PENDING', help_text='Email delivery status', max_length=20)),
                ('sent_at', models.DateTimeField(auto_now_add=True, help_text='When email was sent/attempted')),
                ('error_message', models.TextField(blank=True, help_text='Error message if email failed to send', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('recipient_user', models.ForeignKey(blank=True, help_text='Recipient user,only if registered', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='received_emails', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Email Log',
                'verbose_name_plural': 'Email Logs',
                'db_table': 'email_logs',
                'ordering': ['-sent_at'],
                'indexes': [models.Index(fields=['recipient_user'], name='email_logs_recipie_d90d66_idx'), models.Index(fields=['email_type'], name='email_logs_email_t_fe5930_idx'), models.Index(fields=['status'], name='email_logs_status_e3be55_idx'), models.Index(fields=['sent_at'], name='email_logs_sent_at_9fc48d_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['category'], name='products_categor_4083ff_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['seller'], name='products_seller__c70854_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['is_active'], name='products_is_acti_cb485f_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['price'], name='products_price_fe467e_idx'),
        ),
        migrations.AddIndex(
            model_name='productsale',
            index=models.Index(fields=['seller'], name='product_sal_seller__e939f4_idx'),
        ),
        migrations.AddIndex(
            model_name='productsale',
            index=models.Index(fields=['product'], name='product_sal_product_0fcb28_idx'),
        ),
        migrations.AddIndex(
            model_name='productsale',
            index=models.Index(fields=['sale_date'], name='product_sal_sale_da_ac0494_idx'),
        ),
    ]
